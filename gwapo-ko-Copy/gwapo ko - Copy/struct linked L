#include <cstdlib>
#include <iostream>

using namespace std;

/* Node Decleration */

struct node
{
       int info;
       struct node *next;
}
       *start;

/* Class Definition */

class single_llist
{
      public:
             int choice,nodes,element,position,a,g;
             int h,i,j,k,l,x,z,ct1,ct2,ct3,ct4,wholl,wholl1,whole,dec,deci,numb;
             float num[100],prime[100],dec1,dec2,whol;
             node* create_node(int);
             void menu();
             void process();
             void overall();
             void insert_begin();
             void insert_pos();
             void insert_last();
             void delete_pos();
             void search();
             void update();
             void display();
             single_llist()
             {
                 start=NULL;
             }
};

/* Main: contains menu */


int main(int argc, char *argv[])
{
    single_llist a;
    a.overall();
    start=NULL;
    system("PAUSE");
    return EXIT_SUCCESS;
}

/* Creating Node */

node * single_llist::create_node(int value)
{
     struct node *temp, *s;
     temp= new(struct node);
     if(temp==NULL)
     {
        cout<<"Memory not Allocated"<<endl;
        return 0;
     }
     else
     {
         temp->info=value;
         temp->next=NULL;
         return temp;
     }
}

void single_llist::menu()
{
     cout<<endl<<"----------------------------------------"<<endl;
     cout<<endl<<"Operations on singly linked list"<<endl;
     cout<<endl<<"----------------------------------------"<<endl;
     cout<<"[1]:Insert Node at beginning"<<endl;
     cout<<"[2]:Insert Node at last"<<endl;
     cout<<"[3]:Insert Node at position"<<endl;
     cout<<"[4]:Delete a Particular Node"<<endl;
     cout<<"[5]:Update Node Value"<<endl;
     cout<<"[6]:Search Element"<<endl;
     cout<<"[7]:Display Linked List"<<endl;
     cout<<"[8]:Exit"<<endl;
     
}

void single_llist::process()
{
     cout<<"Enter numbers: ";
     a=0;
     numb=0;
     for(h=0;h<1000;h++)
     {
        cin>>num[h];
        a++;
        if(num[h]==0)
        {
           break;
        }
     }
     
     for(h=0;h<a-1;h++)
     {
        whol=num[h]-(int)num[h];
        if(whol==0)
        {
           whole=(int)num[h];
           if(whole>0)
           {
              ct1=0;
              for(g=2;g<whole;g++)
              {
                 if(whole%g==0)
                 {
                    ct1++;
                 }
              }
              if(ct1==0)
              {
                 prime[numb]=whole;
                 cout<<prime[numb]<<" ";
                 numb++;
              }
           }
           if(whole<0){
              wholl=whole*-1;
              ct2=0;
              for(j=2;j<wholl;j++){
                 if(wholl%j==0){
                    ct2++;
                 }
              }
              if(ct2==0){
                 wholl=wholl*-1;
                 prime[numb]=wholl1;
                 cout<<prime[numb]<<" ";
                 numb++;
                 }
              }
           }
           if(whol!=0){
              dec=(int)num[h];
              if(dec>0){
                 ct3=0;
                 for(k=2;k<dec;k++){
                    if(dec%k==0){
                       ct3++;
                    }
                 }
                 if(ct3==0){
                    dec1=dec+whol;
                    prime[numb]=dec1;
                    cout<<prime[numb]<<" ";
                    numb++;
                 }
              }
              if(dec<0){
                 deci=dec*-1;
                 ct4=0;
                 for(l=2;l<deci;l++){
                     if(deci%l==0){
                         ct4++;
                     }
                 }
                 if(ct4==0){
                     dec2=whol+(deci*-1);
                     prime[numb]=dec2;
                     cout<<prime[numb];
                     numb++;
                 }
              }
           }
        }
     }
     
     void single_llist::overall(){
         process();
         x=0;
         while(1)
         {
            menu();
            cout<<"Enter your choice: ";
            cin>>choice;
            switch(choice){
                case 1:
                   insert_begin();
                   display();
                   cout<<endl;
                   break;
                case 2:
                   insert_last();
                   display();
                   cout<<endl;
                   break;
                case 3:
                   insert_pos();
                   display();
                   cout<<endl;
                   break;
                case 4:
                   delete_pos();
                   display();
                   break;
                case 5:
                   update();
                   display();
                   cout<<endl;
                   break;
                 case 6:
                    search();
                    cout<<endl;
                    break;
                  case 7:
                     display();
                     cout<<endl;
                     break;
                  case 8:
                     cout<<"Exiting. . . . . ."<<endl;
                     exit(1);
                     break;
                  default:
                     cout<<"Invalid Choice"<<endl;
                     }
                 }
         }
         
/* Inserting element in beginning */

void single_llist::insert_begin(){
     int value;
     struct node *temp, *p;
     value=prime[x];
     x++;
     if(value==0){
         /* numb=0; */
         overall();
     }
     temp=create_node(value);
     if(start==NULL){
         start=temp;
         start->next=NULL;
     }
     else{
         p=start;
         start=temp;
         start->next=p;
     }
     cout<<"Element Inserted at Beginning..."<<endl;
}

/* Inserting NOde Last */

void single_llist::insert_last(){
     int value;
     struct node *temp, *s;
     value=prime[x];
     x++;
     if(value==0){
         numb=0;
         overall();
     }
     temp=create_node(value);
     s=start;
     while(s->next !=NULL){
        s= s->next;
     }
     s->next=temp;
     temp->next=NULL;
     cout<<"Element Inserted at Last..."<<endl;
}

/* Insertion of node at a given position */

void single_llist::insert_pos(){
     int value,pos,counter =0;
     struct node *temp, *s, *ptr;
     value=prime[x];
     x++;
     if(value==0){
        numb=0;
        overall();
     }
     temp=create_node(value);
     cout<<"Enter position at which node to be inserted: ";
     cin>>pos;
     int i;
     s=start;
     while(s!=NULL){
        s=s->next;
        counter++;
     }
     if(pos==1){
        if(start==NULL){
           start=temp;
           start->next=NULL;
        }
        else{
           ptr=start;
           start=temp;
           start->next=ptr;
           }
        }
        else if(pos>1 && pos <=counter){
            s=start;
            for(i=1;i<pos;i++){
               ptr=s;
               s=s->next;
            }
            ptr->next=temp;
            temp->next=s;
        }
        else{
           cout<<"Position out of range"<<endl;
           }
}

/* Delete element at a given position */

void single_llist::delete_pos(){
     int pos, i, counter =0;
     if(start==NULL){
         cout<<"List is empty"<<endl;
         return ;
     }
 cout<<"Enter the position of value to be deleted: ";
 cin>>pos;
 struct node *s, *ptr;
 s=start;
 if(pos==1){
     start= s->next;
 }
 else{
    while(s!=NULL){
        s=s->next;
        counter++;
    }
    if(pos>0 && pos<=counter){
           s=start;
           for(i=1;i<pos;i++){
               ptr=s;
               s=s->next;
           }
           ptr->next=s->next;
           }
           else{
               cout<<"Position out of range"<<endl;
           }
           free(s);
           cout<<"Element Deleted"<<endl;
    }
}

/* Update a given node */

void single_llist::update(){
     int value,pos,i;
     if(start==NULL){
         cout<<"List is empty"<<endl;
         return;
     }
     cout<<"Enter the node position to be updated: ";
     cin>>pos;
     struct node *s, *ptr;
     value=prime[x];
     x++;
     if(value==0){
         numb=0;
         menu();
         overall();
     }
     s=start;
     if(pos==1){
         start->info=value;
     }
     else{
          for(i=0;i<pos-1;i++){
               if(s==NULL){
                   cout<<"There are less than "<<pos<<" elements\n";
                   return;
               }
               s=s->next;
          }
          s->info=value;
     }
     cout<<"Node Updated"<<endl;
}

/* Searching an element */

void single_llist::search(){
     int value,pos=0;
     bool flag=false;
     if(start==NULL){
         cout<<"List is empty"<<endl;
         return;
     }
     cout<<"Enter the value to be searched: ";
     cin>>prime[x];
     struct node *s;
     value=prime[x];
     x++;
     s=start;
     while(s!=NULL){
         pos++;
         if(s->info==value){
              flag=true;
              cout<<"Element "<<value<<" is found at position"<<pos<<endl;
         }
         s=s->next;
     }
     if(!flag){
               cout<<"Element "<<value<<" not found in the list"<<endl;
     }
}

/* Display Elements of the List */

void single_llist::display(){
     struct node *temp;
     if(start==NULL){
         cout<<"The List is empty"<<endl;
         return;
     }
     temp=start;
     cout<<"Elements of the list: "<<endl;
     while(temp!=NULL){
         cout<<temp->info<<"->";
         temp=temp->next;
     }
     cout<<"NULL"<<endl;
}         
              