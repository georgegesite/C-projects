#include<cstdlib>
#include<iostream>
#include<cstring>

using namespace std;
class exercise{
public:
   void input();
   void process();
   void output();

char str[100],filter1[100][100],final[100][100];
int len,count,number,num,x,w,l,ww,ll,c,p,prime[100],composite[100],i,j,k,m,f,period,sum, temp[100],t;
};


int main (int argc, char * argv[])
{

exercise a;
a.input();
a.process();
a.output();


 


return EXIT_SUCCESS;

}

void exercise::input(){

cout<<"Input No(s):";
gets(str);

}
void exercise::process(){

len=strlen(str);
w=0;
l=0;

for(i=0;i<len;i++){
       if(str[i]!=' '&&str[i]!='\0'){
           filter1[w][l]=str[i];
           l++;
       }
       else{
           filter1[w][l]='\0';
           w++;
           l=0;
       }
}
f=0;

for(i=0;i<=w;i++){
      period=0;
      number=0;
      len=strlen(filter1[i]);

          for(j=0;j<len;j++){
                if(filter1[i][j]=='.'){
                     period++;
                }
          }
          if(period==0){
              for(j=0;j<len;j++){ if(filter1[i][j]=='1'||filter1[i][j]=='2'||filter1[i][j]=='3'||filter1[i][j]=='4'||filter1[i][j]=='5'||filter1[i][j]=='6'||filter1[i][j]=='7'||filter1[i][j]=='8'||filter1[i][j]=='9'||filter1[i][j]=='0'){
              number++;
              }
              }
           if(number==len){
                 strcpy(final[f],filter1[i]);
                 f++;
           }
           }
}

for(i=0;i<f;i++){
temp[i]=atoi(final[i]);
      

      if(temp[i]!=0){
      count=0;
      for(k=2;k<temp[i];k++){
            if(temp[i]%k==0){
               count++;}
      }
      if(count==0){
      prime[p]=temp[i];
      p++;
      }
      else{
      composite[c]=temp[i];
      c++;
      }
      }
}
}

void exercise::output(){
if(p!=0){
cout<<"\nprime number(s):";
for(i=0;i<p;i++){
     cout<<prime[i]<<" ";
}
}
if(p==0){
cout<<"\nno prime numbers";
}
if(c!=0){
cout<<"\ncomposite number(s):";
for(i=0;i<c;i++){
cout<<composite[i]<<" ";
}
}
if(c==0){
cout<<"\nno composite numbers";
}
}
      

                    
          
 